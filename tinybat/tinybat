#!/usr/bin/env python

"""\
Tinybat - a standalone battery monitor for the rest of us.

@author: Aaron Mavrinac
@contact: mavrinac@gmail.com
@license: GPL-3
"""

import os
import gtk
from gobject import timeout_add
from sys import prefix


sharepath = os.path.join( prefix, "share/tinybat" )
if not os.path.isdir( sharepath ):
    sharepath = "../data"


class BatteryStatusIcon( gtk.StatusIcon ):
    """\
    Battery monitor status icon class, derived from GTK StatusIcon.
    """
    def __init__( self ):
        """\
        Constructor.
        """
        gtk.StatusIcon.__init__( self )

        # set up ACPI files
        acpidir = "/sys/class/power_supply"
        adp = "ac"
        bat = "battery"
        try:
            adp = [ f for f in os.listdir( acpidir ) \
                if f.lower()[ 0 ] == 'a' ][ 0 ]
            bat = [ f for f in os.listdir( acpidir ) \
                if f.lower()[ 0 ] == 'b' ][ 0 ]
        except IndexError:
            pass
        self.file_adpst = os.path.join( acpidir, adp, "online" )
        self.file_batst = os.path.join( acpidir, bat, "status" )
        self.file_batcf = os.path.join( acpidir, bat, "charge_full" )
        self.file_batcn = os.path.join( acpidir, bat, "charge_now" )

        # initialize icon
        self.set_from_file( os.path.join( sharepath, "icons",
                            "battery-missing.png" ) )
        self.set_tooltip( "Battery Not Found" )
        self.set_visible( True )

        # set up updates if file paths are correct
        if os.path.isfile( self.file_adpst ) and \
           os.path.isfile( self.file_batst ) and \
           os.path.isfile( self.file_batcf ) and \
           os.path.isfile( self.file_batcn ):
            self.update()
            timeout_add( 5000, self.on_timeout )

    def update( self ):
        """\
        Update the status icon.
        """
        # set icon
        icon = "battery-"
        if self.battery_level >= 100.0 and self.ac_adapter_online:
            icon += "charged"
        elif self.battery_level > 95.0:
            icon += "100"
        else:
            icon += "%03d" % ( int( self.battery_level ) \
                - int( self.battery_level ) % 20 )
        if self.battery_level < 100.0 \
        and ( self.battery_charging or self.ac_adapter_online ):
            icon += "-charging"
        self.set_from_file( os.path.join( sharepath, "icons", icon + ".png" ) )

        # set tooltip
        tooltip = "Battery " + str( int( self.battery_level ) ) + "% (" + \
                  open( self.file_batst ).readline().rstrip() + ")"
        self.set_tooltip( tooltip )

    def on_timeout( self ):
        """\
        Timeout callback for update.
        """
        self.update()
        return True

    @property
    def ac_adapter_online( self ):
        """\
        Returns whether the AC adapter is on-line.
        """
        if open( self.file_adpst ).readline().rstrip() == '1':
            return True
        return False

    @property
    def battery_charging( self ):
        """\
        Returns whether the battery is charging.
        """
        if open( self.file_batst ).readline().rstrip() == 'Charging':
            return True
        return False

    @property
    def battery_level( self ):
        """\
        Returns the battery level as a percentage.
        """
        return 100.0 * \
            float( open( self.file_batcn ).readline() ) \
            / float( open( self.file_batcf ).readline() )


if __name__ == '__main__':
    tb = BatteryStatusIcon()
    gtk.main()
